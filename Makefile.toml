[tasks.format]
description = "Format all source files."
install_crate = { rustup_component_name = "rustfmt" }
command = "cargo"
args = ["fmt"]

[tasks.lint]
description = "Lint all source files."
install_crate = { rustup_component_name = "clippy" }
command = "cargo"
args = ["clippy"]

[tasks.lint-watch]
description = "Monitor and lint all source files continuously anytime one of them changes."
dependencies = ["lint"]
watch = true

[tasks.clean]
description = "Clean up temporary files generated by the Rust compiler."
command = "cargo"
args = ["clean"]

[tasks.build]
description = "Compile the source code and create testable artifacts."
env = { RUSTFLAGS = "-Cinstrument-coverage" }
command = "cargo"
args = ["build"]
dependencies = ["lint"]

[tasks.run]
description = "Run the application."
env = { RUST_BACKTRACE = 1 }
command = "cargo"
args = ["run"]
dependencies = ["build"]

[tasks.test]
description = "Run all unit tests."
install_crate = { rustup_component_name = "llvm-tools-preview" }
env = { LLVM_PROFILE_FILE = "coverage.profraw", RUST_BACKTRACE = 1 }
command = "cargo"
args = ["test", "--tests"]
dependencies = ["build"]

################################### Code coverage-related tasks ####################################

[tasks.install-rustfilt]
description = "Install rustfilt for demangling compiler symbols"
install_crate = "rustfilt"
command = "rustfilt" # Filler command because cargo-make requires a command (or script) on every task
args = ["--version"]

[tasks.generate-profdata]
description = "Translate the raw profile file (.profraw) into a profile data file (.profdata)."
install_crate = "cargo-binutils" # Enables the "cargo cov" and "cargo profdata" commands
command = "cargo"
args = [
    "profdata", "--", "merge", # Calls llvm-profdata's "merge" command internally (llvm-profdata merge)
    "-sparse",
    "coverage.profraw",
    "-o", "coverage.profdata"
]
dependencies = ["test"] # Because we need the .profraw file to be generated by llvm-tools

[tasks.linux-coverage]
condition = { platforms = ["linux"] }
script_runner = "bash"
script_extension = "sh"
script = { file = "./scripts/linux-coverage-helper.sh" }
dependencies = ["install-rustfilt", "generate-profdata"]

[tasks.windows-coverage]
condition = { platforms = ["windows"] }
script_runner = "powershell"
script_extension = "ps1"
script = { file = "./scripts/windows-coverage-helper.ps1" }
dependencies = ["install-rustfilt", "generate-profdata"]

[tasks.test-coverage]
# We keep the dependencies on the linux-coverage and windows-coverage tasks instead of on this task
# because alias tasks are treated specially by cargo-make and the workflow does not function
# properly if the dependencies are here
description = "Run code coverage analysis and write a tabulated report to STDOUT."
linux_alias = "linux-coverage"
windows_alias = "windows-coverage"
