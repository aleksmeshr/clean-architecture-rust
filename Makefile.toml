[tasks.format]
description = "Format all source files."
install_crate = { rustup_component_name = "rustfmt" }
command = "cargo"
args = ["fmt"]

[tasks.lint]
description = "Lint all source files."
install_crate = { rustup_component_name = "clippy" }
command = "cargo"
args = ["clippy"]

[tasks.lint-watch]
description = "Monitor and lint all source files continuously anytime one of them changes."
dependencies = ["lint"]
watch = true

[tasks.clean]
description = "Clean up files generated by the Rust compiler for all targets."
command = "cargo"
args = ["clean"]

[tasks.clean-debug]
description = "Clean up files generated by the Rust compiler for debug target."
command = "cargo"
args = ["clean", "--target", "debug"]

[tasks.build]
description = "Compile the source code and create testable artifacts."
env = { RUSTFLAGS = "-Cinstrument-coverage" }
command = "cargo"
args = ["build"]
dependencies = ["lint"]

[tasks.run]
description = "Run the application."
env = { RUST_BACKTRACE = 1 }
command = "cargo"
args = ["run"]
dependencies = ["build"]

[tasks.test-ut]
description = "Run unit tests."
env = { RUST_BACKTRACE = 1 }
command = "cargo"
args = ["test", "--lib"]
dependencies = ["build"]

[tasks.test-all]
description = "Run unit and integration tests."
env = { RUST_BACKTRACE = 1, ENV = "test" }
command = "cargo"
args = ["test", "--tests"]
dependencies = ["build"]

################################### Code coverage-related tasks ####################################

[tasks.test-ut-coverage]
description = "Run all unit tests. A clean is requred but not included to allow incremental development."
install_crate = { rustup_component_name = "llvm-tools-preview" }
env = { RUSTFLAGS="-C instrument-coverage", LLVM_PROFILE_FILE = "coverage/tests-%m.profraw", RUST_BACKTRACE = 1, ENV = "test" }
command = "cargo"
args = ["test", "--lib"]
dependencies = ["clean-debug"]

[tasks.install-rustfilt]
description = "Install rustfilt for demangling symbols"
install_crate = "rustfilt"
command = "rustfilt" # Dummy command
args = ["--version"]

[tasks.generate-profdata]
description = "Translate the .profraw into .profdata."
install_crate = "cargo-binutils" # Enables the "cargo cov" and "cargo profdata" commands
command = "cargo"
args = [
    "profdata", "--", "merge",
    "-sparse",
    "coverage/tests-*.profraw",
    "-o", "tests.profdata"
]
dependencies = ["test-ut-coverage"]

[tasks.show-coverage-windows]
description = "Display coverage statistics"
command = "cargo"
args = [
    "cov", "--", "report",
    "-ignore-filename-regex", "\\.cargo.registry|\\.rustup",
    "-instr-profile", "tests.profdata",
    "target/debug/deps/*.exe"
]
dependencies = ["install-rustfilt", "generate-profdata"]

[tasks.html-coverage-windows]
description = "Prepare HTML coverage report"
command = "cargo"
args = [
    "cov", "--", "show",
    "-Xdemangler=rustfilt",
    "-ignore-filename-regex", "\\.cargo.registry|\\.rustup",
    "-show-line-counts-or-regions",
    "-format", "html", "-show-instantiation-summary=false"
    "-output-dir", "coverage",
    "-instr-profile", "tests.profdata",
    "target/debug/deps/*.exe"
]
dependencies = ["show-coverage-windows"]

[tasks.show-coverage-linux]
condition = { platforms = ["linux"] }
script_runner = "bash"
script_extension = "sh"
script = { file = "./scripts/linux-coverage-helper.sh" }

[tasks.show-coverage]
description = "Generate coverage report"
linux_alias = "show-coverage-linux"
windows_alias = "show-coverage-windows"
